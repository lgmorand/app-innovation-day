name: CI

on:
  push:
  workflow_dispatch:

inputs:
  devsecops:
    description: "Enable or disable devsecops"
    required: false
    default: "false"

jobs:
  secrets:
    if: ${{ github.event.inputs.devsecops == 'true' }}
    runs-on: ubuntu-latest
    env:
      SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}
    steps:
      - uses: actions/checkout@v3

      - name: scan secrets with Spectral
        uses: spectralops/spectral-github-action@v3
        with:
          spectral-dsn: ${{ env.SPECTRAL_DSN }}
          spectral-args: scan --ok --engines secrets --include-tags base,audit

  IaC:
    if: ${{ github.event.inputs.devsecops == 'true' }}
    runs-on: ubuntu-latest
    env:
      SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}
    steps:
      - uses: actions/checkout@v3

      - name: scan IaC with Spectral
        uses: spectralops/spectral-github-action@v3
        with:
          spectral-dsn: ${{ env.SPECTRAL_DSN }}
          spectral-args: scan --ok --engines iac --include-tags base,azure
  SAST:
    if: ${{ github.event.inputs.devsecops == 'true' }}
    runs-on: ubuntu-latest
    env:
      SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}
    steps:
      - uses: actions/checkout@v3
      - uses: bearer/bearer-action@v2
        with:
          path: "./src/frontend"

  SCA:
    if: ${{ github.event.inputs.devsecops == 'true' }}
    runs-on: ubuntu-latest
    env:
      SPECTRAL_DSN: ${{ secrets.SPECTRAL_DSN }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Restore dependencies
        run: dotnet restore ./src/frontend/CafeReadConf.sln

      - name: dotnet publish
        run: dotnet publish -c Release -o ./myapp --property WarningLevel=0
        working-directory: ./src/frontend

      - name: scan SCA with Spectral
        uses: spectralops/spectral-github-action@v3
        with:
          spectral-dsn: ${{ env.SPECTRAL_DSN }}
          spectral-args: scan --ok --engines oss --include-tags base,audit

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --file=./src/frontend/CafeReadConf.sln --severity-threshold=medium

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  Docker:
    if: ${{ github.event.inputs.devsecops == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: hadolint
        run: |
          echo 'Downloading Hadolint to lint Dockerfile...'
          wget https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          mv hadolint-Linux-x86_64 hadolint

          echo 'Start Dockerfile lint...'
          ./hadolint Dockerfile -f tty > results.txt

          echo 'Results:'
          cat results.txt
        working-directory: ./src/frontend

  build:
    needs: [secrets, SCA, Docker, IaC, SAST]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Restore dependencies
        run: dotnet restore ./src/frontend/CafeReadConf.sln

      - name: Build
        run: dotnet build --no-restore --configuration Release --property WarningLevel=0
        working-directory: ./src/frontend

      - name: dotnet publish
        run: dotnet publish -c Release -o ./myapp --property WarningLevel=0
        working-directory: ./src/frontend

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ./src/frontend/myapp

  deployToDev:
    needs: [build]
    runs-on: windows-latest
    environment:
      name: "dev"
      url: ${{ steps.deploy-to-webapp-dev.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp-dev
        uses: azure/webapps-deploy@v2
        with:
          app-name: "web-trash-we"
          slot-name: "Dev"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E9CFA327E71D49F198BE8CAA8051BE78 }}
          package: .

  DAST:
    needs: [deployToDev]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "https://innovationday.azurewebsites.net"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

  LoadTest:
    needs: [deployToDev]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Azure Load Testing"
        uses: azure/load-testing@v1
        with:
          resourceGroup: "rg-innovationday"
          loadTestConfigFile: ".load/loadtest.yaml"
          loadTestResource: "loadtestinnovationday"

  deployToProd:
    needs: [LoadTest, DAST]
    runs-on: ubuntu-latest
    environment:
      name: "production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "web-trash-we"
          slot-name: "production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E9CFA327E71D49F198BE8CAA8051BE78 }}
          package: .
